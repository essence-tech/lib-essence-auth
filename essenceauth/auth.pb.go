// Code generated by protoc-gen-go.
// source: auth.proto
// DO NOT EDIT!

/*
Package essenceauth is a generated protocol buffer package.

It is generated from these files:
	auth.proto

It has these top-level messages:
	Empty
	App
	AppList
	AppChange
	AppUserRequest
	Membership
	Group
	GroupList
	GroupChange
	Permission
	PermissionValue
	User
	UserList
	UserChange
*/
package essenceauth

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type App struct {
	ID          string        `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Key         string        `protobuf:"bytes,2,opt,name=Key,json=key" json:"Key,omitempty"`
	Name        string        `protobuf:"bytes,3,opt,name=Name,json=name" json:"Name,omitempty"`
	Permissions []*Permission `protobuf:"bytes,4,rep,name=Permissions,json=permissions" json:"Permissions,omitempty"`
}

func (m *App) Reset()                    { *m = App{} }
func (m *App) String() string            { return proto.CompactTextString(m) }
func (*App) ProtoMessage()               {}
func (*App) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *App) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *App) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *App) GetPermissions() []*Permission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

type AppList struct {
	Apps []*App `protobuf:"bytes,1,rep,name=Apps,json=apps" json:"Apps,omitempty"`
}

func (m *AppList) Reset()                    { *m = AppList{} }
func (m *AppList) String() string            { return proto.CompactTextString(m) }
func (*AppList) ProtoMessage()               {}
func (*AppList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AppList) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

// AppChange is used to update an applications name and admins.
type AppChange struct {
	ID      string   `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Members []string `protobuf:"bytes,3,rep,name=Members,json=members" json:"Members,omitempty"`
}

func (m *AppChange) Reset()                    { *m = AppChange{} }
func (m *AppChange) String() string            { return proto.CompactTextString(m) }
func (*AppChange) ProtoMessage()               {}
func (*AppChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppChange) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AppChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AppChange) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

// AppUserRequest is used to fetch info about a user by an application.
type AppUserRequest struct {
	ID   string   `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Keys []string `protobuf:"bytes,2,rep,name=Keys,json=keys" json:"Keys,omitempty"`
	JWT  string   `protobuf:"bytes,3,opt,name=JWT,json=jWT" json:"JWT,omitempty"`
}

func (m *AppUserRequest) Reset()                    { *m = AppUserRequest{} }
func (m *AppUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AppUserRequest) ProtoMessage()               {}
func (*AppUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppUserRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *AppUserRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *AppUserRequest) GetJWT() string {
	if m != nil {
		return m.JWT
	}
	return ""
}

// Membership provides a list of members and outdsiders for an App or Group.
type Membership struct {
	Members   []string `protobuf:"bytes,1,rep,name=Members,json=members" json:"Members,omitempty"`
	Outsiders []string `protobuf:"bytes,2,rep,name=Outsiders,json=outsiders" json:"Outsiders,omitempty"`
}

func (m *Membership) Reset()                    { *m = Membership{} }
func (m *Membership) String() string            { return proto.CompactTextString(m) }
func (*Membership) ProtoMessage()               {}
func (*Membership) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Membership) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Membership) GetOutsiders() []string {
	if m != nil {
		return m.Outsiders
	}
	return nil
}

type Group struct {
	ID    int32  `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Auto  bool   `protobuf:"varint,3,opt,name=Auto,json=auto" json:"Auto,omitempty"`
	Owner string `protobuf:"bytes,4,opt,name=Owner,json=owner" json:"Owner,omitempty"`
	Apps  []*App `protobuf:"bytes,5,rep,name=Apps,json=apps" json:"Apps,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Group) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetAuto() bool {
	if m != nil {
		return m.Auto
	}
	return false
}

func (m *Group) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Group) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type GroupList struct {
	Groups []*Group `protobuf:"bytes,1,rep,name=Groups,json=groups" json:"Groups,omitempty"`
}

func (m *GroupList) Reset()                    { *m = GroupList{} }
func (m *GroupList) String() string            { return proto.CompactTextString(m) }
func (*GroupList) ProtoMessage()               {}
func (*GroupList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GroupList) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type GroupChange struct {
	ID      int32    `protobuf:"varint,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name    string   `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Auto    bool     `protobuf:"varint,3,opt,name=Auto,json=auto" json:"Auto,omitempty"`
	Members []string `protobuf:"bytes,4,rep,name=Members,json=members" json:"Members,omitempty"`
	Apps    []*App   `protobuf:"bytes,5,rep,name=Apps,json=apps" json:"Apps,omitempty"`
}

func (m *GroupChange) Reset()                    { *m = GroupChange{} }
func (m *GroupChange) String() string            { return proto.CompactTextString(m) }
func (*GroupChange) ProtoMessage()               {}
func (*GroupChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GroupChange) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GroupChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupChange) GetAuto() bool {
	if m != nil {
		return m.Auto
	}
	return false
}

func (m *GroupChange) GetMembers() []string {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupChange) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type Permission struct {
	ID     string             `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Name   string             `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Values []*PermissionValue `protobuf:"bytes,3,rep,name=Values,json=values" json:"Values,omitempty"`
}

func (m *Permission) Reset()                    { *m = Permission{} }
func (m *Permission) String() string            { return proto.CompactTextString(m) }
func (*Permission) ProtoMessage()               {}
func (*Permission) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Permission) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *Permission) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Permission) GetValues() []*PermissionValue {
	if m != nil {
		return m.Values
	}
	return nil
}

type PermissionValue struct {
	Key   string `protobuf:"bytes,1,opt,name=Key,json=key" json:"Key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=Value,json=value" json:"Value,omitempty"`
}

func (m *PermissionValue) Reset()                    { *m = PermissionValue{} }
func (m *PermissionValue) String() string            { return proto.CompactTextString(m) }
func (*PermissionValue) ProtoMessage()               {}
func (*PermissionValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PermissionValue) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PermissionValue) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type User struct {
	Email   string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Picture string `protobuf:"bytes,3,opt,name=Picture,json=picture" json:"Picture,omitempty"`
	Admin   bool   `protobuf:"varint,4,opt,name=Admin,json=admin" json:"Admin,omitempty"`
	Apps    []*App `protobuf:"bytes,5,rep,name=Apps,json=apps" json:"Apps,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetPicture() string {
	if m != nil {
		return m.Picture
	}
	return ""
}

func (m *User) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *User) GetApps() []*App {
	if m != nil {
		return m.Apps
	}
	return nil
}

type UserList struct {
	Users []*User `protobuf:"bytes,1,rep,name=Users,json=users" json:"Users,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UserList) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// A user change request or response.
type UserChange struct {
	Email    string `protobuf:"bytes,1,opt,name=Email,json=email" json:"Email,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=Name,json=name" json:"Name,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=Password,json=password" json:"Password,omitempty"`
}

func (m *UserChange) Reset()                    { *m = UserChange{} }
func (m *UserChange) String() string            { return proto.CompactTextString(m) }
func (*UserChange) ProtoMessage()               {}
func (*UserChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UserChange) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserChange) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserChange) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "essenceauth.Empty")
	proto.RegisterType((*App)(nil), "essenceauth.App")
	proto.RegisterType((*AppList)(nil), "essenceauth.AppList")
	proto.RegisterType((*AppChange)(nil), "essenceauth.AppChange")
	proto.RegisterType((*AppUserRequest)(nil), "essenceauth.AppUserRequest")
	proto.RegisterType((*Membership)(nil), "essenceauth.Membership")
	proto.RegisterType((*Group)(nil), "essenceauth.Group")
	proto.RegisterType((*GroupList)(nil), "essenceauth.GroupList")
	proto.RegisterType((*GroupChange)(nil), "essenceauth.GroupChange")
	proto.RegisterType((*Permission)(nil), "essenceauth.Permission")
	proto.RegisterType((*PermissionValue)(nil), "essenceauth.PermissionValue")
	proto.RegisterType((*User)(nil), "essenceauth.User")
	proto.RegisterType((*UserList)(nil), "essenceauth.UserList")
	proto.RegisterType((*UserChange)(nil), "essenceauth.UserChange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EssenceAuth service

type EssenceAuthClient interface {
	// Used by an application to fetch information about a user using their JWT.
	AppGetUser(ctx context.Context, in *AppUserRequest, opts ...grpc.CallOption) (*User, error)
	// An application can get info about itself.
	AppGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	// Allows an application to provide information about its available permissions.
	// Those permissions can then be given to groups and therefore users.
	AppUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	ListApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppList, error)
	GetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error)
	PutApp(ctx context.Context, in *AppChange, opts ...grpc.CallOption) (*App, error)
	DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error)
	GetAppMembers(ctx context.Context, in *App, opts ...grpc.CallOption) (*Membership, error)
	ListGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupList, error)
	GetGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error)
	PutGroup(ctx context.Context, in *GroupChange, opts ...grpc.CallOption) (*Group, error)
	DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Empty, error)
	GetGroupMembers(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Membership, error)
	ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error)
	GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	CreateUser(ctx context.Context, in *UserChange, opts ...grpc.CallOption) (*User, error)
	PutUser(ctx context.Context, in *UserChange, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error)
	ResetUserPassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserChange, error)
}

type essenceAuthClient struct {
	cc *grpc.ClientConn
}

func NewEssenceAuthClient(cc *grpc.ClientConn) EssenceAuthClient {
	return &essenceAuthClient{cc}
}

func (c *essenceAuthClient) AppGetUser(ctx context.Context, in *AppUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/AppGetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) AppGetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/AppGetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) AppUpdateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/AppUpdateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) ListApps(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AppList, error) {
	out := new(AppList)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/ListApps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) GetApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/GetApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) CreateApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/CreateApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) PutApp(ctx context.Context, in *AppChange, opts ...grpc.CallOption) (*App, error) {
	out := new(App)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/PutApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) DeleteApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/DeleteApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) GetAppMembers(ctx context.Context, in *App, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/GetAppMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) ListGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GroupList, error) {
	out := new(GroupList)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/ListGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) GetGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) PutGroup(ctx context.Context, in *GroupChange, opts ...grpc.CallOption) (*Group, error) {
	out := new(Group)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/PutGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) DeleteGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) GetGroupMembers(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Membership, error) {
	out := new(Membership)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/GetGroupMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) ListUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) GetUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/GetUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) CreateUser(ctx context.Context, in *UserChange, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) PutUser(ctx context.Context, in *UserChange, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/PutUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) DeleteUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *essenceAuthClient) ResetUserPassword(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserChange, error) {
	out := new(UserChange)
	err := grpc.Invoke(ctx, "/essenceauth.EssenceAuth/ResetUserPassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EssenceAuth service

type EssenceAuthServer interface {
	// Used by an application to fetch information about a user using their JWT.
	AppGetUser(context.Context, *AppUserRequest) (*User, error)
	// An application can get info about itself.
	AppGetApp(context.Context, *App) (*App, error)
	// Allows an application to provide information about its available permissions.
	// Those permissions can then be given to groups and therefore users.
	AppUpdateApp(context.Context, *App) (*App, error)
	ListApps(context.Context, *Empty) (*AppList, error)
	GetApp(context.Context, *App) (*App, error)
	CreateApp(context.Context, *App) (*App, error)
	PutApp(context.Context, *AppChange) (*App, error)
	DeleteApp(context.Context, *App) (*Empty, error)
	GetAppMembers(context.Context, *App) (*Membership, error)
	ListGroups(context.Context, *Empty) (*GroupList, error)
	GetGroup(context.Context, *Group) (*Group, error)
	CreateGroup(context.Context, *Group) (*Group, error)
	PutGroup(context.Context, *GroupChange) (*Group, error)
	DeleteGroup(context.Context, *Group) (*Empty, error)
	GetGroupMembers(context.Context, *Group) (*Membership, error)
	ListUsers(context.Context, *Empty) (*UserList, error)
	GetUser(context.Context, *User) (*User, error)
	CreateUser(context.Context, *UserChange) (*User, error)
	PutUser(context.Context, *UserChange) (*User, error)
	DeleteUser(context.Context, *User) (*Empty, error)
	ResetUserPassword(context.Context, *User) (*UserChange, error)
}

func RegisterEssenceAuthServer(s *grpc.Server, srv EssenceAuthServer) {
	s.RegisterService(&_EssenceAuth_serviceDesc, srv)
}

func _EssenceAuth_AppGetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).AppGetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/AppGetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).AppGetUser(ctx, req.(*AppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_AppGetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).AppGetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/AppGetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).AppGetApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_AppUpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).AppUpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/AppUpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).AppUpdateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_ListApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).ListApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/ListApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).ListApps(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).GetApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).CreateApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_PutApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).PutApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/PutApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).PutApp(ctx, req.(*AppChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).DeleteApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_GetAppMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).GetAppMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/GetAppMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).GetAppMembers(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_ListGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).ListGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/ListGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).ListGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).GetGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_PutGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).PutGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/PutGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).PutGroup(ctx, req.(*GroupChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).DeleteGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_GetGroupMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).GetGroupMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/GetGroupMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).GetGroupMembers(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).ListUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).GetUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).CreateUser(ctx, req.(*UserChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_PutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserChange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).PutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/PutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).PutUser(ctx, req.(*UserChange))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).DeleteUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _EssenceAuth_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EssenceAuthServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/essenceauth.EssenceAuth/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EssenceAuthServer).ResetUserPassword(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

var _EssenceAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "essenceauth.EssenceAuth",
	HandlerType: (*EssenceAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppGetUser",
			Handler:    _EssenceAuth_AppGetUser_Handler,
		},
		{
			MethodName: "AppGetApp",
			Handler:    _EssenceAuth_AppGetApp_Handler,
		},
		{
			MethodName: "AppUpdateApp",
			Handler:    _EssenceAuth_AppUpdateApp_Handler,
		},
		{
			MethodName: "ListApps",
			Handler:    _EssenceAuth_ListApps_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _EssenceAuth_GetApp_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _EssenceAuth_CreateApp_Handler,
		},
		{
			MethodName: "PutApp",
			Handler:    _EssenceAuth_PutApp_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _EssenceAuth_DeleteApp_Handler,
		},
		{
			MethodName: "GetAppMembers",
			Handler:    _EssenceAuth_GetAppMembers_Handler,
		},
		{
			MethodName: "ListGroups",
			Handler:    _EssenceAuth_ListGroups_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _EssenceAuth_GetGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _EssenceAuth_CreateGroup_Handler,
		},
		{
			MethodName: "PutGroup",
			Handler:    _EssenceAuth_PutGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _EssenceAuth_DeleteGroup_Handler,
		},
		{
			MethodName: "GetGroupMembers",
			Handler:    _EssenceAuth_GetGroupMembers_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _EssenceAuth_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _EssenceAuth_GetUser_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _EssenceAuth_CreateUser_Handler,
		},
		{
			MethodName: "PutUser",
			Handler:    _EssenceAuth_PutUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _EssenceAuth_DeleteUser_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _EssenceAuth_ResetUserPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

func init() { proto.RegisterFile("auth.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x96, 0xdb, 0x6e, 0xdb, 0x46,
	0x10, 0x86, 0xa1, 0x03, 0x75, 0x18, 0xa6, 0x3e, 0x6c, 0x6c, 0x4b, 0xa1, 0xe5, 0xc6, 0xd8, 0xb6,
	0x68, 0xa0, 0x0b, 0x0b, 0x70, 0x0a, 0x14, 0xe9, 0x9d, 0x11, 0xb9, 0x81, 0xd3, 0x34, 0x56, 0x09,
	0xa7, 0x41, 0x7b, 0x53, 0x30, 0xf1, 0xc6, 0x66, 0x6b, 0x89, 0x2c, 0x0f, 0x0e, 0x0c, 0x23, 0x37,
	0x05, 0xda, 0x07, 0x68, 0x1f, 0xad, 0xaf, 0xd0, 0x07, 0xe9, 0xce, 0xec, 0xd2, 0x12, 0xc9, 0x65,
	0x20, 0xdd, 0x69, 0x4f, 0xdf, 0xfe, 0xf3, 0xcf, 0xec, 0x50, 0x00, 0x5e, 0x9a, 0x5c, 0x1e, 0x84,
	0x51, 0x90, 0x04, 0xcc, 0x16, 0x71, 0x2c, 0x66, 0x6f, 0x05, 0x4e, 0x39, 0x83, 0x8b, 0x20, 0xb8,
	0xb8, 0x12, 0x23, 0x2f, 0xf4, 0x47, 0xde, 0x6c, 0x16, 0x24, 0x5e, 0xe2, 0x07, 0xb3, 0x58, 0x6d,
	0xe5, 0x6d, 0xb0, 0x8e, 0xa7, 0x61, 0x72, 0xc3, 0xaf, 0xa1, 0x71, 0x14, 0x86, 0x6c, 0x0d, 0xea,
	0x27, 0xe3, 0x7e, 0x6d, 0xbf, 0xf6, 0xa8, 0xeb, 0xd6, 0xfd, 0x31, 0xdb, 0x80, 0xc6, 0x77, 0xe2,
	0xa6, 0x5f, 0xa7, 0x89, 0xc6, 0x6f, 0xe2, 0x86, 0x31, 0x68, 0xbe, 0xf4, 0xa6, 0xa2, 0xdf, 0xa0,
	0xa9, 0xe6, 0x4c, 0xfe, 0x66, 0x4f, 0xc0, 0x9e, 0x88, 0x68, 0xea, 0xc7, 0x31, 0xa2, 0xfb, 0xcd,
	0xfd, 0xc6, 0x23, 0xfb, 0xb0, 0x77, 0xb0, 0x20, 0xe3, 0x60, 0xbe, 0xee, 0xda, 0xe1, 0x7c, 0x2f,
	0x1f, 0x41, 0x5b, 0xde, 0xfb, 0xc2, 0x8f, 0x13, 0xf6, 0x39, 0x34, 0xe5, 0xcf, 0x58, 0xde, 0x8e,
	0xc7, 0x37, 0x72, 0xc7, 0xe5, 0x82, 0xdb, 0xf4, 0xe4, 0x2a, 0x3f, 0x81, 0xae, 0x1c, 0x3c, 0xbd,
	0xf4, 0x66, 0x17, 0xa2, 0x24, 0x37, 0x13, 0x57, 0x5f, 0x10, 0xd7, 0x87, 0xf6, 0xf7, 0x62, 0xfa,
	0x46, 0x44, 0xb1, 0xd4, 0xdc, 0x90, 0xd3, 0xed, 0xa9, 0x1a, 0xf2, 0x6f, 0x61, 0x4d, 0xa2, 0x5e,
	0xc5, 0x22, 0x72, 0xc5, 0xef, 0xa9, 0x90, 0x12, 0x0c, 0x3c, 0x19, 0x7e, 0x2c, 0x79, 0x78, 0xb0,
	0x29, 0xe3, 0x8f, 0xd1, 0x92, 0xe7, 0xaf, 0xcf, 0x74, 0xfc, 0x8d, 0x5f, 0x5f, 0x9f, 0xf1, 0x31,
	0x80, 0xbe, 0xe1, 0xd2, 0x0f, 0x17, 0xef, 0xab, 0xe5, 0xee, 0x63, 0x03, 0xe8, 0x9e, 0xa6, 0x49,
	0xec, 0x9f, 0xe3, 0x9a, 0x42, 0x76, 0x83, 0x6c, 0x82, 0xdf, 0x82, 0xf5, 0x2c, 0x0a, 0xd2, 0xc5,
	0x1c, 0x58, 0x95, 0x41, 0xc9, 0xb9, 0xa3, 0x34, 0x09, 0x48, 0x45, 0x47, 0x3a, 0x23, 0x7f, 0xb3,
	0x2d, 0xb0, 0x4e, 0xdf, 0xcf, 0x44, 0x24, 0xfd, 0xc7, 0x8d, 0x56, 0x80, 0x83, 0x3b, 0x57, 0xad,
	0x8f, 0xba, 0xfa, 0x35, 0x74, 0xe9, 0x72, 0x4a, 0xc4, 0x10, 0x5a, 0x34, 0xc8, 0x52, 0xc1, 0x72,
	0x87, 0x68, 0xc9, 0x6d, 0x5d, 0xd0, 0x0e, 0xfe, 0x67, 0x0d, 0x6c, 0x9a, 0x29, 0x65, 0x64, 0x35,
	0xf1, 0x0b, 0xae, 0x35, 0xf3, 0xae, 0x2d, 0x17, 0xc0, 0x3b, 0x80, 0x79, 0x89, 0x2d, 0x55, 0x17,
	0x5f, 0x41, 0xeb, 0x47, 0xef, 0x4a, 0xa6, 0x9d, 0xca, 0xc2, 0x3e, 0x1c, 0x54, 0xd4, 0x2b, 0x6d,
	0x72, 0x5b, 0xd7, 0xb4, 0x97, 0x3f, 0x81, 0xf5, 0xc2, 0x52, 0xf6, 0x46, 0x6a, 0xf3, 0x37, 0x22,
	0x33, 0x41, 0x4b, 0xfa, 0x3e, 0x8b, 0xce, 0xf2, 0xbf, 0x6a, 0xd0, 0xc4, 0x62, 0xc3, 0xe5, 0xe3,
	0xa9, 0xe7, 0x5f, 0xe9, 0x23, 0x96, 0xc0, 0x41, 0x55, 0xed, 0x4e, 0xfc, 0xb7, 0x49, 0x1a, 0x65,
	0xef, 0xad, 0x1d, 0xaa, 0x21, 0x32, 0x8e, 0xce, 0xa7, 0xfe, 0x8c, 0x92, 0xdd, 0x71, 0x2d, 0x0f,
	0x07, 0x4b, 0x7a, 0xf5, 0x18, 0x3a, 0xa8, 0x83, 0x72, 0xfd, 0x25, 0x58, 0xf8, 0x3b, 0x4b, 0xf5,
	0x66, 0xee, 0x08, 0x3d, 0x0d, 0x2b, 0xc5, 0x75, 0xee, 0x02, 0xe0, 0x50, 0xa7, 0x79, 0xf9, 0x10,
	0x1c, 0xe8, 0x4c, 0xbc, 0x38, 0x7e, 0x1f, 0x44, 0xe7, 0x3a, 0x86, 0x4e, 0xa8, 0xc7, 0x87, 0x7f,
	0xaf, 0x81, 0x7d, 0xac, 0xee, 0x93, 0x05, 0x71, 0xc9, 0x5e, 0x01, 0x48, 0x95, 0xcf, 0x44, 0x42,
	0x36, 0xed, 0x16, 0xe5, 0x2f, 0xbc, 0x54, 0xa7, 0x2c, 0x94, 0xf7, 0xfe, 0xf8, 0xf7, 0xbf, 0x7f,
	0xea, 0x9b, 0xfc, 0x1e, 0xf5, 0xba, 0xeb, 0xc3, 0x11, 0x0a, 0xff, 0xa6, 0x36, 0x64, 0xcf, 0xa9,
	0x65, 0x48, 0x2c, 0x76, 0xb8, 0x92, 0x29, 0x4e, 0x69, 0x86, 0x3f, 0x20, 0xd2, 0x7d, 0xb6, 0x99,
	0x91, 0xd0, 0xb6, 0xd1, 0xed, 0xc9, 0xf8, 0x03, 0x9b, 0xc0, 0x3d, 0x54, 0x12, 0x9e, 0x7b, 0x89,
	0x58, 0x16, 0x37, 0x20, 0xdc, 0x0e, 0x2f, 0xe3, 0x50, 0xdd, 0x0b, 0xe8, 0x60, 0x26, 0x30, 0x6f,
	0x2c, 0xff, 0xd2, 0xa8, 0x33, 0x3b, 0x5b, 0x45, 0x1e, 0xee, 0xe6, 0x3b, 0xc4, 0xdc, 0x60, 0x6b,
	0x77, 0x4c, 0xa2, 0xb2, 0x13, 0xf9, 0x76, 0x97, 0x0f, 0x74, 0x97, 0x28, 0xdb, 0xec, 0x7e, 0x9e,
	0xa2, 0x42, 0x95, 0xb6, 0x3d, 0x8d, 0xc4, 0x0a, 0x71, 0x6a, 0xdb, 0x78, 0x41, 0x13, 0x06, 0xe9,
	0x42, 0x6b, 0x92, 0x92, 0xac, 0x9d, 0xe2, 0x31, 0x55, 0x51, 0x06, 0xdc, 0xa7, 0x84, 0xeb, 0x3b,
	0x26, 0x71, 0xc8, 0x7c, 0x09, 0xdd, 0xb1, 0xb8, 0x12, 0x55, 0xfa, 0x0c, 0x5e, 0x66, 0xf1, 0x0e,
	0x8d, 0xf1, 0xfe, 0x02, 0x9f, 0x28, 0xeb, 0x74, 0x23, 0x32, 0x30, 0xf3, 0xdf, 0xb4, 0x79, 0xd3,
	0xe7, 0x9f, 0x11, 0x78, 0x8f, 0xed, 0x1a, 0xc0, 0xa3, 0xac, 0x93, 0xc9, 0x27, 0x84, 0xb9, 0x53,
	0xbd, 0xd5, 0x98, 0xeb, 0x9d, 0x72, 0xa7, 0xa5, 0x6c, 0xf7, 0x09, 0xcf, 0xd8, 0xc6, 0x1c, 0xaf,
	0xfa, 0x2f, 0xfb, 0x01, 0x3a, 0x52, 0xb4, 0xfa, 0x70, 0x18, 0xfa, 0xb4, 0x63, 0x98, 0xe3, 0x7b,
	0x44, 0xeb, 0xb1, 0xed, 0x22, 0x4d, 0xf9, 0xe0, 0x82, 0xad, 0xf2, 0xbe, 0x1a, 0x55, 0x7b, 0xcb,
	0x4b, 0x1a, 0x31, 0x57, 0x3f, 0xcb, 0x2e, 0x90, 0x6a, 0x99, 0xfd, 0xf2, 0x61, 0x5d, 0x03, 0x26,
	0xec, 0x3e, 0x61, 0x1d, 0xc7, 0x2c, 0x16, 0xd9, 0x67, 0x60, 0xab, 0x3a, 0x58, 0x56, 0xaf, 0xaa,
	0x05, 0xed, 0xc2, 0xb0, 0xc2, 0x05, 0x01, 0xeb, 0x99, 0xb1, 0x59, 0x3d, 0x98, 0xc8, 0x95, 0x15,
	0xf1, 0x05, 0xe1, 0x1f, 0xb2, 0x3d, 0x23, 0xfe, 0xae, 0x26, 0x4e, 0xa1, 0x8b, 0x19, 0xa6, 0x1e,
	0x6c, 0x2c, 0x89, 0xed, 0x52, 0xa3, 0xa3, 0x8a, 0xd0, 0xcd, 0x8e, 0xad, 0xcf, 0xf1, 0xd4, 0xa7,
	0x65, 0x83, 0x6a, 0x67, 0x0d, 0xb4, 0xdc, 0x23, 0x4d, 0x6d, 0xf3, 0x21, 0x91, 0x1e, 0xb0, 0x5e,
	0x81, 0x34, 0xba, 0xa5, 0x0e, 0xff, 0x41, 0xfa, 0x0b, 0xaa, 0x1e, 0x08, 0xda, 0x2b, 0x11, 0x74,
	0xf2, 0x0c, 0x68, 0x87, 0xd0, 0x5b, 0xbc, 0x28, 0x12, 0xb3, 0xf6, 0x93, 0xfc, 0xb4, 0xa5, 0xc9,
	0xca, 0x48, 0x4e, 0xc8, 0x81, 0x53, 0xa5, 0x56, 0x15, 0x04, 0xa8, 0x82, 0xa8, 0x72, 0xc1, 0x54,
	0x0e, 0xda, 0x86, 0x61, 0xa5, 0x0d, 0xef, 0x60, 0xd3, 0x15, 0xb1, 0xb2, 0x36, 0xfb, 0xa2, 0x99,
	0xe0, 0x55, 0xd1, 0x64, 0x15, 0xc1, 0xf7, 0x2a, 0x6e, 0x18, 0x45, 0x88, 0x7f, 0xd3, 0xa2, 0x7f,
	0xe6, 0x8f, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xa8, 0xc6, 0x80, 0xe0, 0xd2, 0x0b, 0x00, 0x00,
}
